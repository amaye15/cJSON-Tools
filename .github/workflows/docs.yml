name: Documentation & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  # ============================================================================
  # Generate Documentation
  # ============================================================================
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential doxygen graphviz

    - name: Build C library
      run: |
        make clean && make

    - name: Build Python package
      run: |
        cd py-lib
        pip install -e .

    - name: Generate C API documentation
      run: |
        mkdir -p docs/c-api
        doxygen -g docs/c-api/Doxyfile
        
        # Configure Doxygen
        cat >> docs/c-api/Doxyfile << 'EOF'
        PROJECT_NAME = "cJSON-Tools C Library"
        PROJECT_VERSION = "1.0.0"
        INPUT = c-lib/include c-lib/src
        OUTPUT_DIRECTORY = docs/c-api
        GENERATE_HTML = YES
        GENERATE_LATEX = NO
        RECURSIVE = YES
        EXTRACT_ALL = YES
        EXTRACT_STATIC = YES
        HAVE_DOT = YES
        CALL_GRAPH = YES
        CALLER_GRAPH = YES
        EOF
        
        doxygen docs/c-api/Doxyfile

    - name: Generate Python API documentation
      run: |
        mkdir -p docs/python-api
        cd py-lib
        
        # Generate API docs
        python -c "
        import cjson_tools
        import inspect
        import os
        
        # Generate markdown documentation
        doc_content = []
        doc_content.append('# cJSON-Tools Python API Reference')
        doc_content.append('')
        doc_content.append('## Overview')
        doc_content.append('')
        doc_content.append('High-performance JSON processing toolkit with advanced optimizations.')
        doc_content.append('')
        doc_content.append('## Functions')
        doc_content.append('')
        
        # Document all public functions
        for name in dir(cjson_tools):
            if not name.startswith('_'):
                obj = getattr(cjson_tools, name)
                if callable(obj):
                    doc_content.append(f'### {name}')
                    doc_content.append('')
                    
                    # Get function signature and docstring
                    try:
                        sig = inspect.signature(obj)
                        doc_content.append(f'```python')
                        doc_content.append(f'{name}{sig}')
                        doc_content.append(f'```')
                        doc_content.append('')
                        
                        if obj.__doc__:
                            doc_content.append(obj.__doc__)
                            doc_content.append('')
                    except:
                        doc_content.append('C extension function')
                        doc_content.append('')
        
        with open('../docs/python-api/api.md', 'w') as f:
            f.write('\\\\n'.join(doc_content))
        
        print('✅ Python API documentation generated')
        "

    - name: Generate usage examples
      run: |
        mkdir -p docs/examples
        
        # Create comprehensive examples
        cat > docs/examples/basic_usage.md << 'EOF'
        # Basic Usage Examples
        
        ## JSON Flattening
        
        ### Python
        ```python
        import cjson_tools
        import json
        
        # Basic flattening
        data = {"user": {"name": "John", "details": {"age": 30, "city": "NYC"}}}
        flattened = cjson_tools.flatten_json(json.dumps(data))
        result = json.loads(flattened)
        # Result: {"user.name": "John", "user.details.age": 30, "user.details.city": "NYC"}
        
        # Batch processing
        batch = [json.dumps({"id": i, "value": i*2}) for i in range(1000)]
        results = cjson_tools.flatten_json_batch(batch, use_threads=True)
        ```
        
        ### C Library
        ```bash
        # Flatten JSON from file
        ./bin/json_tools -f input.json -o output.json
        
        # Flatten with pretty printing
        echo '{"user": {"name": "John"}}' | ./bin/json_tools -f -p
        
        # Multi-threaded processing
        ./bin/json_tools -f input.json -t 4
        ```
        
        ## Schema Generation
        
        ### Python
        ```python
        import cjson_tools
        import json
        
        # Generate schema from single object
        data = {"id": 1, "name": "test", "active": True}
        schema = cjson_tools.generate_schema(json.dumps(data))
        
        # Generate schema from multiple objects
        objects = [
            json.dumps({"id": 1, "name": "test1"}),
            json.dumps({"id": 2, "name": "test2", "active": True})
        ]
        schema = cjson_tools.generate_schema_batch(objects)
        ```
        
        ### C Library
        ```bash
        # Generate schema from file
        ./bin/json_tools -s input.json -o schema.json
        
        # Generate with pretty printing
        echo '[{"id": 1}, {"id": 2, "name": "test"}]' | ./bin/json_tools -s -p
        ```
        EOF

    - name: Generate performance documentation
      run: |
        mkdir -p docs/performance
        
        cat > docs/performance/optimizations.md << 'EOF'
        # Performance Optimizations
        
        ## Advanced Optimizations Implemented
        
        ### Memory Management
        - **Custom Slab Allocators**: Reduced malloc/free overhead by 30-50%
        - **Memory Pools**: Cache-aligned allocation for better performance
        - **Zero-Copy String Operations**: Eliminated unnecessary string allocations
        
        ### CPU Optimizations
        - **SIMD Instructions**: AVX2/SSE2 vectorized JSON parsing
        - **Branch Prediction**: Optimized conditional execution
        - **Cache-Friendly Layout**: 64-byte aligned data structures
        - **Prefetching**: Reduced cache misses
        
        ### Threading Optimizations
        - **Lock-Free Data Structures**: Michael & Scott queue implementation
        - **Work-Stealing**: Better load distribution
        - **GIL Release**: True parallelism in Python bindings
        
        ### Compiler Optimizations
        - **Link-Time Optimization (LTO)**: Better inlining across modules
        - **Profile-Guided Optimization**: Runtime-informed optimizations
        - **Function Multi-Versioning**: CPU-specific code paths
        
        ## Performance Results
        
        | Dataset Size | Single-Thread | Multi-Thread | Speedup |
        |--------------|---------------|--------------|---------|
        | 1,000 objects | 102K obj/s | 120K obj/s | 1.18x |
        | 5,000 objects | 85K obj/s | 95K obj/s | 1.12x |
        | 10,000 objects | 75K obj/s | 82K obj/s | 1.09x |
        
        ## Memory Efficiency
        
        - **30-50% reduction** in memory allocations
        - **Cache-friendly** memory access patterns
        - **Huge page support** for better TLB performance
        - **Memory mapping** for large file I/O
        EOF

    - name: Create comprehensive README sections
      run: |
        # Generate installation guide
        cat > docs/INSTALLATION.md << 'EOF'
        # Installation Guide
        
        ## Python Package (Recommended)
        
        ```bash
        pip install cjson-tools
        ```
        
        ## From Source
        
        ### Prerequisites
        - Python 3.8+
        - C compiler (GCC/Clang)
        - Make
        
        ### Build Steps
        ```bash
        git clone https://github.com/amaye15/cJSON-Tools.git
        cd cJSON-Tools
        
        # Build C library
        make
        
        # Build Python package
        cd py-lib
        pip install -e .
        ```
        
        ## Docker
        
        ```bash
        docker build -t cjson-tools .
        docker run --rm -i cjson-tools -f < input.json
        ```
        EOF
        
        # Generate troubleshooting guide
        cat > docs/TROUBLESHOOTING.md << 'EOF'
        # Troubleshooting Guide
        
        ## Common Issues
        
        ### Build Errors
        
        **Issue**: `fatal error: Python.h: No such file or directory`
        **Solution**: Install Python development headers
        ```bash
        # Ubuntu/Debian
        sudo apt-get install python3-dev
        
        # CentOS/RHEL
        sudo yum install python3-devel
        
        # macOS
        xcode-select --install
        ```
        
        **Issue**: `error: Microsoft Visual C++ 14.0 is required`
        **Solution**: Install Visual Studio Build Tools on Windows
        
        ### Performance Issues
        
        **Issue**: Poor multi-threading performance
        **Solution**: Ensure sufficient dataset size (>1000 objects) for threading benefits
        
        **Issue**: High memory usage
        **Solution**: Process data in batches using `flatten_json_batch` with smaller chunks
        
        ### Runtime Errors
        
        **Issue**: `ImportError: cannot import name 'cjson_tools'`
        **Solution**: Reinstall the package: `pip uninstall cjson-tools && pip install cjson-tools`
        EOF

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          docs/
        retention-days: 30

  # ============================================================================
  # Deploy Documentation to GitHub Pages
  # ============================================================================
  deploy-docs:
    name: Deploy Documentation
    needs: generate-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs/

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Create index page
      run: |
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>cJSON-Tools Documentation</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { background: #f8f9fa; padding: 20px; border-radius: 8px; }
                .section { margin: 20px 0; }
                .link { display: block; margin: 10px 0; padding: 10px; background: #e9ecef; border-radius: 4px; text-decoration: none; color: #495057; }
                .link:hover { background: #dee2e6; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>🚀 cJSON-Tools Documentation</h1>
                <p>High-performance JSON processing toolkit with advanced optimizations</p>
            </div>
            
            <div class="section">
                <h2>📚 Documentation</h2>
                <a href="c-api/html/index.html" class="link">C API Reference</a>
                <a href="python-api/api.md" class="link">Python API Reference</a>
                <a href="examples/basic_usage.md" class="link">Usage Examples</a>
                <a href="performance/optimizations.md" class="link">Performance Guide</a>
                <a href="INSTALLATION.md" class="link">Installation Guide</a>
                <a href="TROUBLESHOOTING.md" class="link">Troubleshooting</a>
            </div>
            
            <div class="section">
                <h2>🔗 Links</h2>
                <a href="https://github.com/amaye15/cJSON-Tools" class="link">GitHub Repository</a>
                <a href="https://pypi.org/project/cjson-tools/" class="link">PyPI Package</a>
            </div>
        </body>
        </html>
        EOF

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # ============================================================================
  # Update README Badges
  # ============================================================================
  update-badges:
    name: Update README Badges
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README with latest badges
      run: |
        # Create updated badges section
        cat > badges.md << 'EOF'
        [![CI](https://github.com/amaye15/cJSON-Tools/workflows/Continuous%20Integration/badge.svg)](https://github.com/amaye15/cJSON-Tools/actions/workflows/ci.yml)
        [![Security](https://github.com/amaye15/cJSON-Tools/workflows/Security%20%26%20Vulnerability%20Scanning/badge.svg)](https://github.com/amaye15/cJSON-Tools/actions/workflows/security.yml)
        [![Performance](https://github.com/amaye15/cJSON-Tools/workflows/Performance%20Monitoring%20%26%20Benchmarks/badge.svg)](https://github.com/amaye15/cJSON-Tools/actions/workflows/performance.yml)
        [![PyPI](https://img.shields.io/pypi/v/cjson-tools.svg)](https://pypi.org/project/cjson-tools/)
        [![Python](https://img.shields.io/pypi/pyversions/cjson-tools.svg)](https://pypi.org/project/cjson-tools/)
        [![License](https://img.shields.io/github/license/amaye15/cJSON-Tools.svg)](LICENSE)
        [![Downloads](https://img.shields.io/pypi/dm/cjson-tools.svg)](https://pypi.org/project/cjson-tools/)
        [![Documentation](https://img.shields.io/badge/docs-github%20pages-blue.svg)](https://amaye15.github.io/cJSON-Tools/)
        EOF
        
        # Update README if it exists
        if [ -f README.md ]; then
            # Add badges after the title if not already present
            if ! grep -q "workflows/Continuous" README.md; then
                # Find the first line starting with # and add badges after it
                sed -i '1,/^#/ {
                    /^#/ {
                        r badges.md
                    }
                }' README.md
            fi
        fi

    - name: Commit badge updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Stash any existing changes
        git stash push -m "Temporary stash for badge update"

        # Check if README.md has changes
        if git diff --quiet HEAD~1 README.md; then
            echo "No badge changes to commit"
        else
            git add README.md
            git commit -m "📊 Update README badges [skip ci]" || echo "No changes to commit"
        fi

        # Restore stashed changes if any
        git stash pop || echo "No stash to restore"

  # ============================================================================
  # Release Validation
  # ============================================================================
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate version consistency
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Release version: $VERSION"
        
        # Check Python package version
        cd py-lib
        PYTHON_VERSION=$(python setup.py --version)
        echo "Python package version: $PYTHON_VERSION"
        
        # Validate versions match
        if [ "$VERSION" != "v$PYTHON_VERSION" ]; then
            echo "❌ Version mismatch: tag=$VERSION, python=v$PYTHON_VERSION"
            exit 1
        fi
        
        echo "✅ Version validation passed"

    - name: Test release package
      run: |
        # Build and test the release
        make clean && make
        cd py-lib && pip install -e . && cd ..
        
        # Basic functionality test
        echo '{"test": {"nested": "value"}}' | ./bin/json_tools -f
        
        python -c "
        import cjson_tools
        import json
        
        data = {'test': {'nested': 'value'}}
        result = cjson_tools.flatten_json(json.dumps(data))
        assert 'test.nested' in json.loads(result)
        print('✅ Release validation passed')
        "

    - name: Generate release notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🚀 What's New
        
        ### Performance Improvements
        - Advanced memory pool allocation
        - SIMD-optimized JSON parsing
        - Lock-free data structures
        - Multi-threading enhancements
        
        ### Features
        - JSON flattening with dot notation
        - JSON Schema generation (Draft-07)
        - Python bindings with C performance
        - Cross-platform support (Linux, macOS, Windows)
        
        ### Installation
        ```bash
        pip install cjson-tools
        ```
        
        ### Documentation
        - [API Reference](https://amaye15.github.io/cJSON-Tools/)
        - [Performance Guide](https://amaye15.github.io/cJSON-Tools/performance/optimizations.html)
        - [Examples](https://amaye15.github.io/cJSON-Tools/examples/basic_usage.html)
        EOF
        
        echo "📝 Release notes generated"

name: Security & Vulnerability Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  # ============================================================================
  # Dependency Vulnerability Scanning
  # ============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd py-lib
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety bandit semgrep

    - name: Python dependency vulnerability scan
      run: |
        cd py-lib
        safety check --json --output safety-report.json || true
        safety check --short-report || true

    - name: Python security linting
      run: |
        cd py-lib
        bandit -r cjson_tools/ -f json -o bandit-report.json || true
        bandit -r cjson_tools/ -ll || true

    - name: Semgrep security scan
      run: |
        cd py-lib
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto . || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          py-lib/safety-report.json
          py-lib/bandit-report.json
          py-lib/semgrep-report.json
        retention-days: 30

  # ============================================================================
  # CodeQL Analysis
  # ============================================================================
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c', 'python' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Setup build environment
      if: matrix.language == 'c'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Build C library
      if: matrix.language == 'c'
      run: |
        make clean
        make

    - name: Build Python package
      if: matrix.language == 'python'
      run: |
        cd py-lib
        python -m pip install --upgrade pip
        pip install build
        python -m build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # ============================================================================
  # Container Security Scanning
  # ============================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy source code
        COPY . /app
        WORKDIR /app
        
        # Build and install
        RUN make clean && make
        RUN cd py-lib && pip install -e .
        
        # Create non-root user
        RUN useradd -m -u 1000 cjsonuser
        USER cjsonuser
        
        # Test installation
        RUN python -c "import cjson_tools; print('âœ… Installation successful')"
        
        ENTRYPOINT ["./bin/json_tools"]
        EOF

    - name: Build Docker image
      run: |
        docker build -t cjson-tools:test .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cjson-tools:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Test container functionality
      run: |
        echo '{"user": {"name": "John", "details": {"age": 30}}}' | \
        docker run --rm -i cjson-tools:test -f

  # ============================================================================
  # License Compliance Check
  # ============================================================================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install license checker
      run: |
        pip install pip-licenses licensecheck

    - name: Check Python dependencies licenses
      run: |
        cd py-lib
        pip install -e .
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        
        # Check for problematic licenses
        pip-licenses --fail-on="GPL v3" --fail-on="AGPL v3" || true

    - name: Scan for license files
      run: |
        find . -name "LICENSE*" -o -name "COPYING*" -o -name "COPYRIGHT*" | head -20

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          py-lib/licenses.json
          py-lib/licenses.md
        retention-days: 30

  # ============================================================================
  # Memory Safety Testing
  # ============================================================================
  memory-safety:
    name: Memory Safety Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install memory testing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind clang

    - name: Build with AddressSanitizer
      run: |
        make clean
        CFLAGS="-fsanitize=address -g -O1" LDFLAGS="-fsanitize=address" make

    - name: Test with AddressSanitizer
      run: |
        export ASAN_OPTIONS=detect_leaks=1:abort_on_error=1
        echo '{"test": {"nested": {"deep": "value"}}}' | ./bin/json_tools -f
        echo '{"id": 1, "name": "test"}' | ./bin/json_tools -s

    - name: Build normal version for Valgrind
      run: |
        make clean
        CFLAGS="-g -O0" make

    - name: Test with Valgrind
      run: |
        cd c-lib/tests
        echo '{"user": {"name": "John", "data": {"values": [1,2,3]}}}' > test_input.json
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
          --track-origins=yes --error-exitcode=1 \
          ../../bin/json_tools -f test_input.json

    - name: Memory stress test
      run: |
        cd c-lib/tests
        # Generate larger test file
        ./generate_test_data stress_test.json 1000 4
        
        # Test with Valgrind
        valgrind --tool=memcheck --leak-check=full --error-exitcode=1 \
          ../../bin/json_tools -f stress_test.json > /dev/null

  # ============================================================================
  # Security Summary Report
  # ============================================================================
  security-summary:
    name: Security Summary Report
    needs: [dependency-scan, codeql-analysis, container-scan, license-check, memory-safety]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download security artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-reports/

    - name: Generate security summary
      run: |
        echo "# ðŸ”’ Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job results
        echo "| Component | Status |" >> security-summary.md
        echo "|-----------|--------|" >> security-summary.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> security-summary.md
        echo "| Container Scan | ${{ needs.container-scan.result }} |" >> security-summary.md
        echo "| License Check | ${{ needs.license-check.result }} |" >> security-summary.md
        echo "| Memory Safety | ${{ needs.memory-safety.result }} |" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "- âœ… Regular dependency updates" >> security-summary.md
        echo "- âœ… Memory safety validation with Valgrind/AddressSanitizer" >> security-summary.md
        echo "- âœ… Container security scanning" >> security-summary.md
        echo "- âœ… License compliance monitoring" >> security-summary.md
        echo "- âœ… Static code analysis with CodeQL" >> security-summary.md
        echo "" >> security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ”’ Security Scan Results\n\n${summary}`
          });
